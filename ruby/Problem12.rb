# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

def triangle_number(n)
  (1..n).reduce(:+)
end

# Returns true or false for whether x is a triangular number
def triangular?(x)
  ((Math.sqrt(8 * x + 1) -1)/2)*10 % 10 == 0
end

# x is nth triangular number
# n = (Math.sqrt(8*x +1) -1)/2

# Generates Array of all divisors of x
def divisors(x)
  divisors = (2..x/2).select do |factor|
    x % factor == 0
  end
  divisors = [1] + divisors + [x]
end

def number_of_divisors(x)
  divisors(x).count
end

def perfect?(x)
  divisors(x).reduce(:+) == 2*x
end

# Generates array containing the first n triangle numbers as elements

def triangles(n)
  # array = []
  (1..n).map do |x|
    x*(x+1)/2
  end
end

#forces a guess of nth triangle number
def find_triangular_with_500_divisors(n)
  triangles(n).each do |x|
    return x if divisors(x).count >= 500
  end
end



