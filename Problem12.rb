# Problem 12

# The sequence of triangle numbers is generated by adding the natural numbers. 
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?



def triangle_number(n) 
  (1..n).inject{|sum, num| sum + num} 

# Generates array containing the first n triangle numbers as elements

def triangles(n)
  array = []
  (1..n).each do |n|
    array << (1..n).inject{|sum, num| sum + num} 
  end
  array
end

# Generates Array of all divisors of n
def divisors(n)
  array = [1,n]
  (2..n/2).each do |factor|
    if n % factor == 0
      array.push factor, n/factor
    end
  end
  array.uniq.sort
end

#forces a guess of nth triangle number
triangles = triangles(1000)
triangles.each do |x|
  num_factors = divisors(x).count
  if num_factors > 500
    return x
  end
end
